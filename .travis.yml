dist: xenial
language: cpp

env:
  - BUILD_TYPE=Release

matrix:
  include:
    - os: linux
      compiler: gcc
      addons: { apt: { packages: [ g++-9,doxygen ] , sources: [ ubuntu-toolchain-r-test ] } }
      env: BUILD_TYPE=Release COMPILER_VER=9 GEN_DOC=TRUE

cache:
  directories:
    - $HOME/.local

install:
  - if [[ "${COMPILER_VER}" != "" ]]; then export CXX=${CXX}-${COMPILER_VER}; fi
  - if [[ "${COMPILER_VER}" != "" ]]; then export CC=${CC}-${COMPILER_VER}; fi
  - if [[ "${COMPILER_VER}" != "" ]]; then export GCOV=gcov-${COMPILER_VER}; fi
  - if [[ "${USE_ASAN}" == "1" ]]; then export CXXFLAGS="-fsanitize=address -fno-omit-frame-pointer"; fi
  - if [[ "${USE_UBSAN}" == "1" ]]; then export CXXFLAGS="-fsanitize=undefined -fno-omit-frame-pointer"; fi
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      mkdir -p $HOME/.local

      CMAKE_URL="https://github.com/Kitware/CMake/releases/download/v3.16.4/cmake-3.16.4-Linux-x86_64.tar.gz"
      if [ ! -e $HOME/.local/bin/cmake ]; then
          echo "CMake not found in the cache, get and extract it..."
          travis_retry curl -L ${CMAKE_URL} \
              | tar -xz -C $HOME/.local --strip-components=1
      else
          echo "Using cached CMake"
      fi
    fi
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew update && brew upgrade cmake
    fi

script:
  - cmake --version
  - ${CXX} --version
  - echo CXXFLAGS=${CXXFLAGS}
  - |
    if [[ "$BUILD_TYPE" == "Coverage" ]]; then
      ctest -S cmake/CI.CTestScript.cmake --output-on-failure -VV -DCTEST_SITE=Travis -DCTEST_BUILD_NAME="${TRAVIS_OS_NAME}-$BUILD_TYPE"
    else
      mkdir build && cd build && \
      cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE .. && \
      make -j4 && \
      ctest -VV .
    fi
  - |
    if [[ "$GEN_DOC" == "TRUE" ]]; then
      cmake --build . --target doc
    fi

after_success:
  - |
    if [[ "$BUILD_TYPE" == "Coverage" ]]; then
      bash <(curl -s https://codecov.io/bash) -X gcov || echo "Codecov did not collect coverage reports"
    fi